# Maintainer: Jupyter Gallery Team <team@jupyter.gallery>
pkgname=jg-cling
pkgver=0.2.0
pkgrel=0
pkgdesc="C++ kernel for the Jupyter Gallery alpine client"
url="https://github.com/jupyter-gallery/alpine-testing"
arch="x86_64"
license="MIT"
depends="git"
depends_dev=""
makedepends="$depends_dev"
install=""
subpackages=""

_builddir=$startdir/build
_patchdir=$startdir/patches
_prefix=$pkgdir/usr/local
_libdir=$_prefix/lib
_bindir=$_prefix/bin
_includedir=$_prefix/include

prepare() {
	cd $srcdir
	git clone http://root.cern.ch/git/llvm.git
	git checkout cling-patches
	cd tools
	git clone http://root.cern.ch/git/cling.git
	git clone http://root.cern.ch/git/clang.git
	cd clang
	git checkout cling-patches

	# Apply our patches
	cd $srcdir
	patch -p1 < $_patchdir/alpine-llvm-patches
	cd $srcdir/tools/cling
	patch -p1 < $_patchdir/cling-kernel-patches
}

build() {
	# Configure with options to minimize size.
	# Need these CXXFLAGS to get it to compile.
	export CXXFLAGS="-fpermissive -D_GLIBCXX_USE_CXX11_ABI=0"
	cd $startdir
	mkdir -p $_builddir
	cd $_builddir
	$srcdir/configure \
		--prefix=$_prefix \
		--enable-optimized \
		--enable-cxx1y \
		--enable-targets=host \
		--disable-docs \
		--disable-doxygen \
		--disable-debug-symbols \
		--disable-keep-symbols \
		--disable-clang-arcmt \
		--disable-clang-plugin-support \
		--disable-clang-static-analyzer
}

package() {
	# Build only llvm, clang, and cling.
	# cling depends on a generated file inside clang, but the dependency isn't
	# specified in the Make system, so build clang by itself first.
	make -j4 ONLY_TOOLS="clang" BUILD_EXAMPLES=0
	make -j4 ONLY_TOOLS="clang cling" BUILD_EXAMPLES=0
	make -j4 ONLY_TOOLS="clang cling" BUILD_EXAMPLES=0 install

	# The cling configure/make system doesn't build the Jupyter kernel shared library.
	# These commands were generated with the cmake build system and cleaned up a bit.
	cd $srcdir/tools/cling/tools/Jupyter

	/usr/bin/c++ -DCLING_INCLUDE_PATHS=\"$_includedir:$srcdir/tools/cling/include:$srcdir/tools/cling/../clang/include:$srcdir/tools/cling/../../include\" -DCLING_VERSION="ROOT_0.2~dev" -DGTEST_HAS_RTTI=0 -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -I$_builddir/tools/cling/tools/Jupyter -I$srcdir/tools/cling/tools/Jupyter -I$srcdir/tools/cling/include -I$_builddir/tools/cling/include -I$srcdir/tools/cling/../clang/include -I$_builddir/tools/cling/../clang/include -I$srcdir/tools/cling/../llvm/src/tools/clang/include -I$_builddir/tools/cling/../llvm/src/tools/clang/include -I$_builddir/include -I$srcdir/include  -fpermissive -D_GLIBCXX_USE_CXX11_ABI=0  -fPIC -fvisibility-inlines-hidden -Wall -W -Wno-unused-parameter -Wwrite-strings -Wcast-qual -Wno-missing-field-initializers -pedantic -Wno-long-long -Wno-maybe-uninitialized -Wnon-virtual-dtor -Wno-comment -std=c++11 -ffunction-sections -fdata-sections -fno-common -Woverloaded-virtual -Wcast-qual -fno-strict-aliasing -pedantic -Wno-long-long -Wall -W -Wno-unused-parameter -Wwrite-strings -Wno-unused-local-typedefs -fPIC   -fno-rtti -fno-exceptions -fno-rtti -o Kernel.cpp.o -c Kernel.cpp

	/usr/bin/c++  -fPIC -fpermissive -D_GLIBCXX_USE_CXX11_ABI=0  -fPIC -fvisibility-inlines-hidden -Wall -W -Wno-unused-parameter -Wwrite-strings -Wcast-qual -Wno-missing-field-initializers -pedantic -Wno-long-long -Wno-maybe-uninitialized -Wnon-virtual-dtor -Wno-comment -std=c++11 -ffunction-sections -fdata-sections -fno-common -Woverloaded-virtual -Wcast-qual -fno-strict-aliasing -pedantic -Wno-long-long -Wall -W -Wno-unused-parameter -Wwrite-strings -Wno-unused-local-typedefs  -Wl,-O3  -Wl,-z,defs -shared -Wl,-soname,libclingJupyter.so -o $_libdir/libclingJupyter.so Kernel.cpp.o $_libdir/libclangAST.a $_libdir/libclangBasic.a $_libdir/libclangCodeGen.a $_libdir/libclangDriver.a $_libdir/libclangFrontend.a $_libdir/libclangLex.a $_libdir/libclangParse.a $_libdir/libclangSema.a $_libdir/libclangSerialization.a $_libdir/libclingUserInterface.a $_libdir/libclingMetaProcessor.a $_libdir/libclingInterpreter.a $_libdir/libclingUtils.a $_libdir/libLLVMCore.a $_libdir/libLLVMSupport.a $_libdir/libLLVMMCJIT.a $_libdir/libLLVMOrcJIT.a $_libdir/libLLVMExecutionEngine.a $_libdir/libLLVMRuntimeDyld.a $_libdir/libLLVMX86AsmParser.a $_libdir/libLLVMX86CodeGen.a $_libdir/libLLVMAsmPrinter.a $_libdir/libLLVMSelectionDAG.a $_libdir/libLLVMCodeGen.a $_libdir/libLLVMTarget.a $_libdir/libLLVMX86Desc.a $_libdir/libLLVMX86AsmPrinter.a $_libdir/libLLVMX86Utils.a $_libdir/libLLVMX86Disassembler.a $_libdir/libLLVMX86Info.a $_libdir/libLLVMMCDisassembler.a $_libdir/libclangCodeGen.a $_libdir/libclangFrontend.a $_libdir/libclangDriver.a $_libdir/libclangParse.a $_libdir/libclangSerialization.a $_libdir/libclangSema.a $_libdir/libclangAnalysis.a $_libdir/libLLVMOption.a $_libdir/libclangEdit.a $_libdir/libclangAST.a $_libdir/libclangLex.a $_libdir/libclangBasic.a $_libdir/libLLVMBitWriter.a $_libdir/libLLVMipo.a $_libdir/libLLVMVectorize.a $_libdir/libLLVMIRReader.a $_libdir/libLLVMAsmParser.a $_libdir/libLLVMInstrumentation.a $_libdir/libLLVMLinker.a $_libdir/libLLVMObjCARCOpts.a $_libdir/libLLVMScalarOpts.a $_libdir/libLLVMInstCombine.a $_libdir/libLLVMProfileData.a $_libdir/libLLVMObject.a $_libdir/libLLVMBitReader.a $_libdir/libLLVMMCParser.a $_libdir/libLLVMMC.a $_libdir/libLLVMTransformUtils.a $_libdir/libLLVMipa.a $_libdir/libLLVMAnalysis.a $_libdir/libLLVMCore.a $_libdir/libLLVMSupport.a -lrt -ldl -latomic -lpthread -lm -Wl,-rpath,"\$ORIGIN/../lib" 

	# Now install the kernel itself.
	cd $srcdir/tools/cling/tools/Jupyter/kernel
	pip3 install --root="$pkgdir" .
	jupyter kernelspec install cling
	cp scripts/jupyter-cling-kernel $_bindir

	# We don't need any of the binaries or libs except libclingJupyter.so
	cd $startdir
	rm -rf $srcdir
	rm -rf $_builddir
	rm $_bindir/clang*
	rm $_bindir/cling
	rm $_bindir/llvm-tblgen
	rm $_libdir/libclang*.a
	rm $_libdir/libcling*.a
	rm $_libdir/libLLVM*.a
}
